The various ways to define and use variables in Ansible. Key points:

Defining Variables in Playbooks:

Variables in Ansible playbooks are defined using the var keyword.
Syntax: var: { variable_name: variable_value }
Example: var: { DB_Name: "Electric", DB_User: "Current", DB_Pass: "Tesla" }

Inventory-Based Variables:

Variables can be defined at the inventory level for all hosts or specific groups/hosts.
Group Variables: group_vars/all or group_vars/group_name
Host Variables: host_vars/host_name

Roles in Ansible:

Roles have two files where variables can be defined: vars and defaults.

Fact Variables:

Fact variables are automatically generated during the "gathering facts" task, initiated by the setup module.
Examples of fact variables include ansible_os_family, ansible_processor_cores, and others.

Runtime Variables:

Output of a task can be stored in a variable using the register option.
This stored output can be used in subsequent tasks.

Debug Module:

The debug module is used to print variables and messages for troubleshooting purposes.
It can be used to print the output of a registered variable.
Demonstrated the process of defining variables in playbooks, using them in tasks, and printing them using the debug module. Additionally, the concept of registering task output and using it later was introduced.

Fact Variables Overview:

Fact variables are runtime variables generated by the setup module in Ansible.
They provide information about the host, such as operating system name, processor cores, kernel versions, IP address, MAC address, and architecture.

Running Setup Module:

The setup module is executed by default when a playbook runs, gathering facts about the host in JSON format.
Fact variables are collected during runtime but are not used unless needed in the playbook.

Disabling Gathering Facts:

Gathering facts can be disabled using the gather_facts: false option in the playbook.
Without gathering facts, attempting to use undefined variables results in errors.

Ad Hoc Execution of Setup Module:

The setup module can be executed ad hoc using the ansible-m setup command.
This command provides detailed information about the host in JSON format.

Working with Fact Variables:

Fact variables can be accessed in playbooks using the debug module.
Examples include printing the operating system name (ansible_distribution) and RAM memory (ansible_memory_mb.real.free).

Host Variable Precedence:

Host-level variables take precedence over global variables.
This is demonstrated by defining specific variables for a host (e.g., web_zero_three) to override global variables.

Accessing Nested Dictionaries and Lists:

Fact variables often involve nested dictionaries and lists.
To access values within nested structures, use dot notation for dictionaries and square brackets for lists.

Practical Use of Fact Variables:

Fact variables can be used for decision-making in playbooks.
Examples include checking free RAM and determining processor names.
